#  Copyright (c) 2017-2018 Uber Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

dist: xenial
language: python
cache: pip
python:
  - '2.7'
  - '3.6'

install:
  # Upgrade pip to avoid weird failures, such as failing to install torchvision
  - pip install --upgrade pip==18.0
  # This will use requirements from setup.py and install them in the tavis's virtual environment
  # [tf] chooses to depend on cpu version of tensorflow (alternatively, could do [tf_gpu])
  - pip install -q -e .[tf,test,torch,docs]
  # pyarrow was compiled against a newer version of numpy than we require so we need to upgrade it
  # (or optionally install pyarrow from source instead of through binaries)
  - pip install --upgrade numpy

before_script:
  # enable core dumps
  - ulimit -c unlimited -S

script:
  # Build documentation
  - (cd docs/autodoc && make html)

  - pylint --rcfile=.pylintrc petastorm examples -f parseable -r n
  # Ignore two pytorch tests to prevent static-TLS-caused torch-import seg-fault
  - pytest -v --cov=./ --trace-config
    --ignore=examples/mnist/tests/test_generate_mnist_dataset.py
    --ignore=petastorm/tests/test_pytorch_utils.py
  # Run the pytorch tests separately, in this order, but accumulate code coverage data
  # Temporary disabled until we figure out (a) segfaults in the first test with `import torch`,
  # and (b) hanging in `test_read_mnist_dataset`
  # - pytest -v examples/mnist/tests/test_generate_mnist_dataset.py petastorm/tests/test_pytorch_utils.py --cov=./ --cov-append

  # Verify caching of synthetic dataset is working (at least not failing)
  - pytest --cache-synthetic-dataset --log-cli-level info petastorm/tests/test_end_to_end.py::test_reading_subset_of_columns
  - pytest --cache-synthetic-dataset --log-cli-level info petastorm/tests/test_end_to_end.py::test_reading_subset_of_columns

after_success:
  - codecov

after_failure:
  # Only upon failure, install gdb to process core dump
  - sudo apt-get install -y gdb
  - COREFILE=$(find . -maxdepth 2 -name "core*" | head -n 1)
  # NOTE: without debug info, the stack trace won't be too useful.
  # If it's possible to run with python2.7-dbg, then gdb hook py-bt will do its magic.
  - if [[ -f "$COREFILE" ]]; then gdb -c "$COREFILE" python -ex "thread apply all bt" -ex "set pagination 0" -batch; fi

deploy:
  - provider: pypi
    user: uber
    password:
      secure: bBhR/9acyXeG1qssIlo46aUmyv7eJid0hHd4JoHVltGlO2WKkIooImxa1sBBrbYX/8eEgmtKSH4umUENVkfIPdPjUs9g4mnFigKv1JxwQoUZduYE/6Fxcxr9TQNjksGbo8JYzRsjtIccNpuqUyh6OfISqVkmn12faCl74x52YHOLuoZVLgdLfs9zSdy0r7Mrpd6PZNJMt2jcDMhD6CpMqBhBwYyE3klFa6fwaB1j3rcl4SiOyrAbHtzTvxHj9ZqB+QO2pcnQ0jJzzk0e2ZuvvvMQQS1WPPqNjxmeZHzKhCvpH7Nep5dCUVGs/kWqEOSTh7GokyPL8mturG6ZK4ldH4arM4XgDr0Hh2OLbZ/QU3LF4jVBVfyA8erERX5J8+XaUh8N9vZoOtQEuFx+tg72JAAXvo2+V4K8foplUf1HPJ2MIsUwHR+rqu40K0V6o7lLnoBdst4QpGddxoBmoC4eSd/RQHcTynzSBqbOTYLz6qIO0ujhfTGXhaygQMv/nwgo4YQN9zIhgaT9eRLTKoH+3iFhS2iLMPgez69LJDlSnIbW+ln5F9i5ISoZqFIAF+arwDRY3WottE+jTgdLlTPlhiIYM/ASkkEs86AfChlzzyTnwnKoZ+18BxHE9quXa3j9lah83eJey6GSpUlCReZZanGVDlaUD7d6PZV5hZMFZ8E=
    distributions: sdist bdist_wheel
    on:
      tags: true
      python: 3.6

  # Push all python wheels created to Github release
  - provider: releases
    skip_cleanup: true
    api_key:
      secure: I96u6KqgSj0Cqx2NvLLLgw6rx7+gN4/6wdptfBrP1zxppMERu/iaLYLgDwDKRXzgTIrx5LopFIllf9/kPcUJgDFj/AxESo6aukzcYK3tB2OhEYIAxYcZf8Kt3aV+AHp/TIDdZ9sGbVLxypuxSXqiAc5dJw8S0Njja/9Qgxe4jqNXNLjLxEb3qlCrYJFEA9MxxPgH/QsWZ6M43hR5gNrGWrhSaIHSjMXXkzRjQG+bGApFf+XRx7le2M5vIeaw1K/osJ930QEjDTnp0v5hFvkB9F1buC17rZO8Xy0KAAhB1+SaEWtS4N0lFIVYE1b3Ke1ek82kW1d7UDEAcEL6ccICboKtvhFfgb1MXVQkdRq4HlhwHl8n4FJIztbwXaQW1aISR5x+m6RIFwMuI+U/MjcVVt+CEgo8X4HATb2pdgWnFcS649t7lhrx7HCBNZpUNmfoZ/YyNgPdQf+vreCNxWOpqi4UacH890GhLFUFXtijeL7xGXWIg7ugQmlK27CfM1mMN1Vp9NTRAXA0x7HuqckWKY85lCJMT+3IJMgVjz+BdGZDQ5RJI22FmRDNuWrH/Mio77EK+sOsKm/X3Q8/Sb8uwU+Ft1Vb7aikQ2NIl89uQQdVxH4TlQw6/VQSZODacTUwMz5CkB0RJNrlbZpUpPrHiTVa4dRo7/34qe7iGA7XtfY=
    file_glob: true
    file: dist/*.whl
    on:
      tags: true
      python: 3.6
