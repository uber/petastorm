#  Copyright (c) 2017-2018 Uber Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

dist: trusty
language: python
cache: pip
python:
  - '2.7'
  - '3.6'
matrix:
  include:
    - python: '3.7'
      sudo: required  # required for Python 3.7 (travis-ci/travis-ci#9069)
  allow_failures:
    - python: '3.7'  # Until Python 3.7 support is added to https://pypi.org/project/pyarrow

install:
  - jdk_switcher use openjdk8
  - java -version
  # Upgrade pip to avoid weird failures, such as failing to install torchvision
  - pip install --upgrade pip==18.0
  # This will use requirements from setup.py and install them in the tavis's virtual environment
  # [tf] chooses to depend on cpu version of tensorflow (alternatively, could do [tf_gpu])
  - pip install -q -e .[tf,test,torch,docs]
  # pyarrow was compiled against a newer version of numpy than we require so we need to upgrade it
  # (or optionally install pyarrow from source instead of through binaries)
  - pip install --upgrade numpy
  - pip install pytest-timeout

before_script:
  # enable core dumps
  - ulimit -c unlimited -S
  - pip install flake8

  # We run a bunch of linting in before_script to fail fast and not run unit tests in case of lint failure.

  # stop the build if there are Python syntax errors or undefined names
  - flake8 . --count --show-source --statistics
  # exit-zero treats all errors as warnings. We can make it a blocking test once issue #178 is addressed.
  - flake8 . --count --exit-zero --max-complexity=10 --statistics

  - pylint --rcfile=.pylintrc petastorm examples -f parseable -r n

script:
  # Build documentation
  - (cd docs/autodoc && make html)

  # Running pytest twice: first tests that do not have to be forked. Run it with -Y --cache-clear
  # which will create synthetic datasets that are used by multiple tests and store them in cache.
  # Next pytest invoke will run boxed tests, but read the synthetic datasets from cache and not
  # waste time on recreating them

  # Tensorflow and pytorch tests confict (segfault). Split into separate runs.
  - pytest --timeout=180 --duration=0 -v examples/mnist/tests/test_pytorch_mnist.py --cov=./ --cov-append

  # Ignore two pytorch tests to prevent static-TLS-caused torch-import seg-fault
  - pytest --timeout=180 --duration=0 -Y --cache-clear -m "not forked" -v --cov=./  --cov-append --trace-config
    --ignore=examples/mnist/tests/test_pytorch_mnist.py
    --ignore=petastorm/tests/test_pytorch_utils.py petastorm examples

  # We have a separate run for forked: make sure fixtures are reused as much as possible
  - pytest --timeout=180 --duration=0 -Y -m "forked" --forked -v --cov=./ --cov-append --trace-config
    --ignore=examples/mnist/tests/test_pytorch_mnist.py
    --ignore=petastorm/tests/test_pytorch_utils.py petastorm examples

after_success:
  - codecov

after_failure:
  # Only upon failure, install gdb to process core dump
  - sudo apt-get install -y gdb
  - COREFILE=$(find . -maxdepth 2 -name "core*" | head -n 1)
  # NOTE: without debug info, the stack trace won't be too useful.
  # If it's possible to run with python2.7-dbg, then gdb hook py-bt will do its magic.
  - if [[ -f "$COREFILE" ]]; then gdb -c "$COREFILE" python -ex "thread apply all bt" -ex "set pagination 0" -batch; fi

before_deploy:
  # Build a python wheel before deployment
  - python setup.py bdist_wheel

deploy:
  # Disabling pypi deployment. There is an issue with authentication at the moment
  - provider: pypi
    user: uber
    password:
      secure: OEyw3NVW1kuSWSJAW+OBSZUk4uSSnkZnQ4njM1EFooTDZ2axAe69y+Z/PRjuLup7bbdxgq8DUXzK+jUWs07vcPYUKp0ek9Gni9gmv08B62P2plupfw35KCjxBTd3RY1cWpkX425ePucuAH1PojY5J0LU4BCPOmyzdpAniLdmcXwJTM1EsQXCub3v/TBK1dxyFMHUyW9WqRStQI1xF8mxhVupnZ/spN+ixvqTMakBczqEttd8AsoSXQtvEUo5ot082/U8LryvrHEsHH52hdbWlSR8TxbC1fK8LgEeXoeqfhOiYNtdOTB1+cGmdJSvjbHCq4OUfl1sbTbBSxrkLNeFAQztAQqIybp1F5PjjVKAr3mHB7HpnMoUcDQiVZ8srfwBpCGZlsj6BsNxYGidiSXvKyKHO1TnTHxNhXIjPzAxjPHXFm7HH9kCXavGEMwXMn06TNq9uP/e6ekd0qE2l+x7xc9i7bdSpIXC9s1uCNqbObiV+/BNXvtDjAVxmp4d+foIPwLx6Qz42IFzPb96lY2Ifow8I8406F/Y5t003xFwnkkgbfI6Ya8gJaJIP6pYGuWJY/lj6/5nElroeiZg1G3rCRBfxwG0RJ2RVhNpuqAcXrQ7SUQ/bbDKUc5psrE920kpF/V3j5tA83pSyJW49IjNQxRABGviPh7aSVWFBeyh0BE=
    distributions: sdist bdist_wheel
    on:
      tags: true
      python: 3.6

  # Push all python wheels created to Github release
  - provider: releases
    skip_cleanup: true
    api_key:
      secure: I96u6KqgSj0Cqx2NvLLLgw6rx7+gN4/6wdptfBrP1zxppMERu/iaLYLgDwDKRXzgTIrx5LopFIllf9/kPcUJgDFj/AxESo6aukzcYK3tB2OhEYIAxYcZf8Kt3aV+AHp/TIDdZ9sGbVLxypuxSXqiAc5dJw8S0Njja/9Qgxe4jqNXNLjLxEb3qlCrYJFEA9MxxPgH/QsWZ6M43hR5gNrGWrhSaIHSjMXXkzRjQG+bGApFf+XRx7le2M5vIeaw1K/osJ930QEjDTnp0v5hFvkB9F1buC17rZO8Xy0KAAhB1+SaEWtS4N0lFIVYE1b3Ke1ek82kW1d7UDEAcEL6ccICboKtvhFfgb1MXVQkdRq4HlhwHl8n4FJIztbwXaQW1aISR5x+m6RIFwMuI+U/MjcVVt+CEgo8X4HATb2pdgWnFcS649t7lhrx7HCBNZpUNmfoZ/YyNgPdQf+vreCNxWOpqi4UacH890GhLFUFXtijeL7xGXWIg7ugQmlK27CfM1mMN1Vp9NTRAXA0x7HuqckWKY85lCJMT+3IJMgVjz+BdGZDQ5RJI22FmRDNuWrH/Mio77EK+sOsKm/X3Q8/Sb8uwU+Ft1Vb7aikQ2NIl89uQQdVxH4TlQw6/VQSZODacTUwMz5CkB0RJNrlbZpUpPrHiTVa4dRo7/34qe7iGA7XtfY=
    file_glob: true
    file: dist/*.whl
    on:
      tags: true
      python: 3.6
